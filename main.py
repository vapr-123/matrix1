# Импортируем необходимые модули
import multiprocessing  # Для параллельных вычислений
import sys  # Для работы с аргументами командной строки

# Функция для чтения матрицы из файла
def read_matrix(filename):
    """
    Читает матрицу из файла.

    Параметры:
        filename (str): Имя файла, из которого читается матрица.

    Возвращает:
        list: Двумерный список (матрица), содержащий числа из файла.
    """
    # Открываем файл на чтение
    with open(filename, 'r') as f:
        matrix = []  # Инициализируем пустой список для хранения строк матрицы
        for line in f:
            # Убираем лишние пробелы и символы перевода строки
            line = line.strip()
            # Разделяем строку на отдельные элементы по пробелам
            str_numbers = line.split()
            # Преобразуем каждую строку в число (float)
            row = [float(num) for num in str_numbers]
            # Добавляем полученный список чисел в матрицу
            matrix.append(row)
    # Возвращаем матрицу
    return matrix

# Функция для вычисления одного элемента произведения матриц
def compute_element(args):
    """
    Вычисляет значение одного элемента результирующей матрицы.

    Параметры:
        args (tuple): Кортеж, содержащий индекс элемента и матрицы A и B.

    Возвращает:
        tuple: Кортеж, содержащий индекс элемента и вычисленное значение.
    """
    # Распаковываем аргументы
    index, A, B = args
    i, j = index  # Индексы строки и столбца для вычисляемого элемента
    res = 0  # Инициализируем переменную для накопления суммы
    # Количество элементов для суммирования (число столбцов в A или строк в B)
    N = len(A[0])
    # Цикл по общему размеру для суммирования произведений
    for k in range(N):
        # Умножаем элемент из строки матрицы A на элемент из столбца матрицы B и добавляем к сумме
        res += A[i][k] * B[k][j]
    # Возвращаем индекс и вычисленное значение элемента
    return (index, res)

# Главная функция программы
def main():
    """
    Основная функция программы.

    Выполняет чтение матриц, их проверку, умножение и запись результата.
    """
    # Проверяем наличие необходимых аргументов командной строки
    if len(sys.argv) != 3:
        print("Использование: python программа.py matrix1.txt matrix2.txt")
        sys.exit(1)  # Завершаем программу с кодом ошибки

    # Читаем имена файлов матриц из аргументов командной строки
    matrix1_file = sys.argv[1]
    matrix2_file = sys.argv[2]

    # Читаем матрицы из указанных файлов
    A = read_matrix(matrix1_file)
    B = read_matrix(matrix2_file)

    # Проверяем возможность перемножения матриц
    # Число столбцов матрицы A должно совпадать с числом строк матрицы B
    if len(A[0]) != len(B):
        print("Матрицы не могут быть перемножены: число столбцов A не равно числу строк B")
        sys.exit(1)

    # Определяем размер результирующей матрицы
    result_rows = len(A)      # Число строк результирующей матрицы
    result_cols = len(B[0])   # Число столбцов результирующей матрицы

    # Создаем список индексов элементов результирующей матрицы
    indices = []  # Инициализируем пустой список индексов
    for i in range(result_rows):
        for j in range(result_cols):
            indices.append((i, j))  # Добавляем кортеж индексов (i, j)

    # Подготавливаем аргументы для функции compute_element
    args = []  # Инициализируем список аргументов
    for index in indices:
        args.append((index, A, B))  # Добавляем кортеж (индекс, матрица A, матрица B)

    # Определяем количество процессов
    num_processes = 4  # Задаем заранее количество процессов, например, 4

    # Создаем пул процессов для параллельного выполнения
    with multiprocessing.Pool(processes=num_processes) as pool:
        # Параллельно вычисляем элементы результирующей матрицы
        results = pool.map(compute_element, args)

    # Инициализируем пустую матрицу для хранения результатов
    result_matrix = []
    for i in range(result_rows):
        # Создаем строку с нулевыми значениями
        row = [0] * result_cols
        # Добавляем строку в результирующую матрицу
        result_matrix.append(row)

    # Заполняем результирующую матрицу вычисленными значениями
    for result in results:
        (i, j), value = result
        result_matrix[i][j] = value  # Присваиваем значение элементу матрицы

    # Записываем результирующую матрицу в файл
    with open('result_matrix.txt', 'w') as f:
        for row in result_matrix:
            # Преобразуем числа в строки
            str_numbers = [str(num) for num in row]
            # Объединяем числа через пробел и добавляем перевод строки
            line = ' '.join(str_numbers) + '\n'
            # Записываем строку в файл
            f.write(line)

# Проверяем, является ли данный скрипт основным (а не импортированным модулем)
if __name__ == '__main__':
    # Запускаем основную функцию
    main()